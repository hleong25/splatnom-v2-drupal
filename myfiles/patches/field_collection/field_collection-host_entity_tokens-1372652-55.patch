diff --git a/field_collection.module b/field_collection.module
index 5692657..58bd1c4 100644
--- a/field_collection.module
+++ b/field_collection.module
@@ -1931,3 +1931,35 @@ function field_collection_devel_generate($object, $field, $instance, $bundle) {
 
   return array('value' => $field_collection->item_id);
 }
+
+/**
+ * Implements hook_field_attach_insert().
+ *
+ * Resave field collections after host entities are created.
+ * This allows features including use of host entity tokens.
+ */
+function field_collection_field_attach_update($host_entity_type, $host_entity) {
+  $options = array(
+    'default' => FALSE,
+    'deleted' => FALSE,
+    'language' => NULL,
+  );
+  list(, , $bundle) = entity_extract_ids($host_entity_type, $host_entity);
+  $instances = _field_invoke_get_instances($host_entity_type, $bundle, $options);
+  foreach ($instances as $instance) {
+    $field = field_info_field_by_id($instance['field_id']);
+    if ($field['type'] == 'field_collection') {
+      $field_name = $field['field_name'];
+      $available_languages = field_available_languages($host_entity_type, $field);
+      $languages = _field_language_suggestion($available_languages, $options['language'], $field_name);
+      foreach ($languages as $langcode) {
+        $items = isset($host_entity->{$field_name}[$langcode]) ? $host_entity->{$field_name}[$langcode] : array();
+        foreach ($items as &$item) {
+          if ($entity = field_collection_field_get_entity($item)) {
+            $entity->save(TRUE);
+          }
+        }
+      }
+    }
+  }
+}
