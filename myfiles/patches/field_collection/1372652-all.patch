diff --git a/www/sites/all/modules/field_collection/field_collection.module b/www/sites/all/modules/field_collection/field_collection.module
index 96ba5bc..f14d7ae 100644
--- a/www/sites/all/modules/field_collection/field_collection.module
+++ b/www/sites/all/modules/field_collection/field_collection.module
@@ -390,6 +390,18 @@ class FieldCollectionItemEntity extends Entity {
           $query->age(FIELD_LOAD_REVISION);
         }
         $result = $query->execute();
+        // When revisioning is enabled, {field_collection_item_revision}
+        // might not be written at this point yet (e.g. when arriving here
+        // from field_collection_field_update().) If so, let's use the
+        // previous revision to determine the host entity.
+        if (empty($result)) {
+          $query = new EntityFieldQuery();
+          $query->fieldCondition($this->fieldInfo(), 'revision_id', $this->original->revision_id);
+          if (!$this->isInUse()) {
+            $query->age(FIELD_LOAD_REVISION);
+          }
+          $result = $query->execute();
+        }
         list($this->hostEntityType, $data) = each($result);
 
         if ($this->isInUse()) {
@@ -1041,6 +1053,38 @@ function field_collection_field_delete($entity_type, $entity, $field, $instance,
 }
 
 /**
+ * Implements hook_field_attach_insert().
+ *
+ * Resave field collections after host entities are created.
+ * This allows features including use of host entity tokens.
+ */
+function field_collection_field_attach_insert($host_entity_type, $host_entity) {
+  $options = array(
+    'default' => FALSE,
+    'deleted' => FALSE,
+    'language' => NULL,
+  );
+  list(, , $bundle) = entity_extract_ids($host_entity_type, $host_entity);
+  $instances = _field_invoke_get_instances($host_entity_type, $bundle, $options);
+  foreach ($instances as $instance) {
+    $field = field_info_field_by_id($instance['field_id']);
+    if ($field['type'] == 'field_collection') {
+      $field_name = $field['field_name'];
+      $available_languages = field_available_languages($host_entity_type, $field);
+      $languages = _field_language_suggestion($available_languages, $options['language'], $field_name);
+      foreach ($languages as $langcode) {
+        $items = isset($host_entity->{$field_name}[$langcode]) ? $host_entity->{$field_name}[$langcode] : array();
+        foreach ($items as &$item) {
+          if ($entity = field_collection_field_get_entity($item)) {
+            $entity->save(TRUE);
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
  * Implements hook_field_delete_revision().
  */
 function field_collection_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
@@ -1957,3 +2001,35 @@ function field_collection_devel_generate($object, $field, $instance, $bundle) {
     'revision_id' => $field_collection->revision_id,
   );
 }
+
+/**
+ * Implements hook_field_attach_insert().
+ *
+ * Resave field collections after host entities are created.
+ * This allows features including use of host entity tokens.
+ */
+function field_collection_field_attach_update($host_entity_type, $host_entity) {
+  $options = array(
+    'default' => FALSE,
+    'deleted' => FALSE,
+    'language' => NULL,
+  );
+  list(, , $bundle) = entity_extract_ids($host_entity_type, $host_entity);
+  $instances = _field_invoke_get_instances($host_entity_type, $bundle, $options);
+  foreach ($instances as $instance) {
+    $field = field_info_field_by_id($instance['field_id']);
+    if ($field['type'] == 'field_collection') {
+      $field_name = $field['field_name'];
+      $available_languages = field_available_languages($host_entity_type, $field);
+      $languages = _field_language_suggestion($available_languages, $options['language'], $field_name);
+      foreach ($languages as $langcode) {
+        $items = isset($host_entity->{$field_name}[$langcode]) ? $host_entity->{$field_name}[$langcode] : array();
+        foreach ($items as &$item) {
+          if ($entity = field_collection_field_get_entity($item)) {
+            $entity->save(TRUE);
+          }
+        }
+      }
+    }
+  }
+}
